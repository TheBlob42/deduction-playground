{:name "modus-tollens", :given [(impl a b) (not b)], :conclusion [(not a)], :forwards true, :proof [{:rule :premise, :id 1, :body (impl a b)} {:rule :premise, :id 2, :body (not b)} [{:id 5, :body a, :rule :assumption} {:id 8, :body b, :rule "\"impl-e\" (1 5)"} {:id 9, :body contradiction, :rule "\"not-e\" (2 8)"}] {:id 4, :body (not a), :rule "\"not-i\" ([5 9])"}]}
{:name "rule-13-b", :given [(forall [x] (not (P x)))], :conclusion [(not (exists [x] (P x)))], :forwards true, :proof [{:id 1, :body (forall [x] (not (P x))), :rule :premise} [{:id 4, :body (not (not (exists [x] (P x)))), :rule :assumption} {:id 7, :body (exists [x] (P x)), :rule "\"classical\" (4)"} [{:rule :assumption, :id 8, :body (actual V1)} {:rule :assumption, :id 9, :body (P V1)} {:id 12, :body (not (P V1)), :rule "\"forall-e\" (1 8)"} {:id 13, :body contradiction, :rule "\"not-e\" (12 9)"}] {:id 6, :body contradiction, :rule "\"exists-e\" ([8 13] 7)"}] {:id 3, :body (not (exists [x] (P x))), :rule "\"raa\" ([4 6])"}]}
{:name "generalisation", :given [(at x a)], :conclusion [(at x (always a))], :forwards true, :proof [{:id 1, :body (at x a), :rule :premise} [{:id 4, :body (<= x x), :rule :assumption} {:id 6, :body (at x a), :rule "\"already proved\" (1)"}] {:id 3, :body (at x (always a)), :rule "\"always-i\" ([4 6])"}]}
{:name "rule-2", :given [(at x (impl a b))], :conclusion [(at x (impl (not b) (not a)))], :forwards true, :proof [{:id 1, :body (at x (impl a b)), :rule :premise} [{:id 4, :body (at x (not b)), :rule :assumption} [{:id 7, :body (at x a), :rule :assumption} {:id 12, :body (at x b), :rule "\"impl-e\" (1 7)"} {:id 9, :body (at x (and b (not b))), :rule "\"and-i\" (12 4)"}] {:id 6, :body (at x (not a)), :rule "\"not-i\" ([7 9])"}] {:id 3, :body (at x (impl (not b) (not a))), :rule "\"impl-i\" ([4 6])"}]}
{:name "rule-3", :given [(at x (impl a b)) (at x (impl b c))], :conclusion [(at x (impl a c))], :forwards true, :proof [{:rule :premise, :id 1, :body (at x (impl a b))} {:rule :premise, :id 2, :body (at x (impl b c))} [{:id 5, :body (at x a), :rule :assumption} {:id 8, :body (at x b), :rule "\"impl-e\" (1 5)"} {:id 9, :body (at x c), :rule "\"impl-e\" (2 8)"}] {:id 4, :body (at x (impl a c)), :rule "\"impl-i\" ([5 9])"}]}
{:name "temporal-4", :given [], :conclusion [(at x (impl (and true a) a))], :forwards true, :proof [{:id 2, :body (at x (impl (and true a) a)), :rule "\"classical\""}]}
{:name "temporal-4", :given [], :conclusion [(at x (impl (and true a) a))], :forwards true, :proof [{:id 2, :body (at x (impl (and true a) a)), :rule "\"classical\" ()"}]}
{:name "rule-5", :given [(at x (asap (not a)))], :conclusion [(at x (not (asap a)))], :forwards true, :proof [{:id 1, :body (at x (asap (not a))), :rule :premise} {:id 8, :body (at y (not a)), :rule "\"asap-e\" (1)"} [{:id 5, :body (at x (not (not (asap a)))), :rule :assumption} {:id 9, :body (at x (asap a)), :rule "\"not-e\" (5)"} {:id 10, :body (at y a), :rule "\"asap-e\" (9)"} {:id 7, :body (at y (and a (not a))), :rule "\"and-i\" (10 8)"}] {:id 4, :body (at x (not (not (not (asap a))))), :rule "\"not-i\" ([5 7])"} {:id 3, :body (at x (not (asap a))), :rule "\"not-e\" (4)"}]}
{:name "temporal-5", :given [], :conclusion [(at x (impl (asap (not a)) (not (asap a))))], :forwards true, :proof [[{:id 3, :body (at x (asap (not a))), :rule :assumption} {:id 10, :body (at y (not a)), :rule "\"asap-e\" (3)"} [{:id 7, :body (at x (not (not (asap a)))), :rule :assumption} {:id 11, :body (at x (asap a)), :rule "\"not-e\" (7)"} {:id 12, :body (at y a), :rule "\"asap-e\" (11)"} {:id 9, :body (at y (and a (not a))), :rule "\"and-i\" (12 10)"}] {:id 6, :body (at x (not (not (not (asap a))))), :rule "\"not-i\" ([7 9])"} {:id 5, :body (at x (not (asap a))), :rule "\"not-e\" (6)"}] {:id 2, :body (at x (impl (asap (not a)) (not (asap a)))), :rule "\"impl-i\" ([3 5])"}]}
{:name "rule-6", :given [(at x (not (sometime a)))], :conclusion [(at x (always (not a)))], :forwards true, :proof [{:id 1, :body (at x (not (sometime a))), :rule :premise} [{:id 4, :body (<= x y), :rule :assumption} [{:id 7, :body (at y a), :rule :assumption} {:id 10, :body (at x (sometime a)), :rule "\"sometime-i\" (4 7)"} {:id 12, :body (at x (and (sometime a) (not (sometime a)))), :rule "\"and-i\" (1 10)"}] {:id 6, :body (at y (not a)), :rule "\"not-i\" ([7 12])"}] {:id 3, :body (at x (always (not a))), :rule "\"always-i\" ([4 6])"}]}
{:name "rule-7", :given [(at x (not (always a)))], :conclusion [(at x (sometime (not a)))], :forwards true, :proof [{:id 1, :body (at x (not (always a))), :rule :premise} [{:id 5, :body (at x (not (sometime (not a)))), :rule :assumption} {:id 8, :body (at x (always (not (not a)))), :rule "\"rule-6\" (5)"} {:id 9, :body (at x (always a)), :rule "\"classical\" (8)"} {:id 7, :body (at x (and (always a) (not (always a)))), :rule "\"and-i\" (9 1)"}] {:id 4, :body (at x (not (not (sometime (not a))))), :rule "\"not-i\" ([5 7])"} {:id 3, :body (at x (sometime (not a))), :rule "\"not-e\" (4)"}]}
{:name "classical-theorem-1", :given [], :conclusion [(at x (impl (and a (asap false)) false))], :forwards true, :proof [{:id 2, :body (at x (impl (and a (asap false)) false)), :rule "\"classical\" ()"}]}
{:name "classical-theorem-2", :given [], :conclusion [(at x (impl false false))], :forwards true, :proof [{:id 2, :body (at x (impl false false)), :rule "\"classical\" ()"}]}
{:name "temporal-8", :given [], :conclusion [(at x (impl (until a false) false))], :forwards true, :proof [{:id 5, :body (at x (impl (and a (asap false)) false)), :rule "\"classical-theorem-1\" ()"} {:id 6, :body (at x (always (impl (and a (asap false)) false))), :rule "\"generalisation\" (5)"} {:id 7, :body (at x (impl false false)), :rule "\"classical-theorem-2\" ()"} {:id 8, :body (at x (always (impl false false))), :rule "\"generalisation\" (7)"} {:id 2, :body (at x (impl (until a false) false)), :rule "\"until-e\" (8 6)"}]}
{:name "rule-8", :given [(at x (until a false))], :conclusion [(at x false)], :forwards true, :proof [{:id 1, :body (at x (until a false)), :rule :premise} {:id 8, :body (at x (impl (and a (asap false)) false)), :rule "\"classical-theorem-1\" ()"} {:id 9, :body (at x (always (impl (and a (asap false)) false))), :rule "\"generalisation\" (8)"} {:id 10, :body (at x (impl false false)), :rule "\"classical-theorem-2\" ()"} {:id 11, :body (at x (always (impl false false))), :rule "\"generalisation\" (10)"} {:id 4, :body (at x (impl (until a false) false)), :rule "\"until-e\" (11 9)"} {:id 3, :body (at x false), :rule "\"impl-e\" (4 1)"}]}
{:name "rule-9", :given [(at x (sometime a))], :conclusion [(at x (until true a))], :forwards true, :proof [{:id 1, :body (at x (sometime a)), :rule :premise} {:id 4, :body (<= x y), :rule "\"sometime-e\" (1)"} {:id 5, :body (at y a), :rule "\"sometime-e\" (1)"} [{:id 7, :body (at x (not (until true a))), :rule :assumption} {:id 12, :body (at x (or (always (not a)) (until (not a) (and (not true) (not a))))), :rule "\"not-until\" (7)"} {:id 13, :body (at x (or (always (not a)) (until (not a) false))), :rule "\"classical\" (12)"} {:id 14, :body (at x (or (always (not a)) false)), :rule "\"rule-8\" (13)"} {:id 15, :body (at x (always (not a))), :rule "\"classical\" (14)"} {:id 16, :body (at y (not a)), :rule "\"always-e\" (15 4)"} {:id 9, :body (at y (and a (not a))), :rule "\"and-i\" (5 16)"}] {:id 6, :body (at x (not (not (until true a)))), :rule "\"not-i\" ([7 9])"} {:id 3, :body (at x (until true a)), :rule "\"not-e\" (6)"}]}
{:name "rule-10", :given [(at x (asap (sometime a)))], :conclusion [(at x (sometime a))], :forwards true, :proof [{:id 1, :body (at x (asap (sometime a))), :rule :premise} {:id 6, :body (at y (sometime a)), :rule "\"asap-e\" (1)"} {:id 7, :body (<= y z), :rule "\"sometime-e\" (6)"} {:id 8, :body (at z a), :rule "\"sometime-e\" (6)"} {:id 9, :body (next x y), :rule "\"asap-seriality\" ()"} {:id 10, :body (<= x y), :rule "\"asap/<=\" (9)"} {:id 11, :body (<= x z), :rule "\"transitivity\" (7 10)"} {:id 3, :body (at x (sometime a)), :rule "\"sometime-i\" (8 11)"}]}
{:name "classical-theorem-3", :given [], :conclusion [(at x (impl (not a) (not a)))], :forwards true, :proof [{:id 2, :body (at x (impl (not a) (not a))), :rule "\"classical\" ()"}]}
{:name "classical-theorem-1", :given [], :conclusion [(at x (impl (and a (asap false)) false))], :forwards true, :proof [{:id 2, :body (at x (impl (and a (asap false)) false)), :rule "\"classical\" ()"}]}
{:name "classical-theorem-2", :given [], :conclusion [(at x (impl false false))], :forwards true, :proof [{:id 2, :body (at x (impl false false)), :rule "\"classical\" ()"}]}
{:name "temporal-8", :given [], :conclusion [(at x (impl (until a false) false))], :forwards true, :proof [{:id 5, :body (at x (impl (and a (asap false)) false)), :rule "\"classical-theorem-1\" ()"} {:id 6, :body (at x (always (impl (and a (asap false)) false))), :rule "\"generalisation\" (5)"} {:id 7, :body (at x (impl false false)), :rule "\"classical-theorem-2\" ()"} {:id 8, :body (at x (always (impl false false))), :rule "\"generalisation\" (7)"} {:id 2, :body (at x (impl (until a false) false)), :rule "\"until-e\" (8 6)"}]}
{:name "rule-8", :given [(at x (until a false))], :conclusion [(at x false)], :forwards true, :proof [{:id 1, :body (at x (until a false)), :rule :premise} {:id 8, :body (at x (impl (and a (asap false)) false)), :rule "\"classical-theorem-1\" ()"} {:id 9, :body (at x (always (impl (and a (asap false)) false))), :rule "\"generalisation\" (8)"} {:id 10, :body (at x (impl false false)), :rule "\"classical-theorem-2\" ()"} {:id 11, :body (at x (always (impl false false))), :rule "\"generalisation\" (10)"} {:id 4, :body (at x (impl (until a false) false)), :rule "\"until-e\" (11 9)"} {:id 3, :body (at x false), :rule "\"impl-e\" (4 1)"}]}
{:name "modus-tollens", :given [(impl a b) (not b)], :conclusion [(not a)], :forwards true, :proof [{:rule :premise, :id 1, :body (impl a b)} {:rule :premise, :id 2, :body (not b)} [{:id 5, :body a, :rule :assumption} {:id 9, :body b, :rule "\"impl-e\" (5 1)"} {:id 10, :body contradiction, :rule "\"not-e\" (2 9)"}] {:id 4, :body (not a), :rule "\"not-i\" ([5 10])"}]}
{:name "regel1", :given [(and a b)], :conclusion [(and b a)], :forwards true, :proof [{:id 1, :body (and a b), :rule :premise} {:id 4, :body a, :rule "\"and-e1\" (1)"} {:id 5, :body b, :rule "\"and-e2\" (1)"} {:id 7, :body (and b a), :rule "\"and-i\" (4 5)"}]}
